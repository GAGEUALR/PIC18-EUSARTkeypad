//configuration and includes are the same as transmit code.

void configurePIC()
{
    TRISA = 0x00; // Set PORTA as output
    TRISB = 0xF8; // Set PORTB as input
    TRISC = 0xFA; // Set PORTC as input except for RC2
    
    PORTA = 0x00; // Initialize PORTA
    ANSELC = 0;
    
    OSCCON = 0x72; // Set clock to 16 MHz
}

void configureReceiveBaud(){
    
    TXSTA1bits.BRGH = 1; // High speed
    BAUDCON1bits.BRG16 = 0; // 8 bit
    SPBRG = 51;           // 19200 bps
}

void configureReceiveCon()
{
    TRISCbits.RC6 = 1;      //input
    TRISCbits.RC7 = 1;      //input
    RCSTA1bits.SPEN = 1; // Enables EUSART
    TXSTA1bits.SYNC = 0; // Asynchronous operation
    RCSTA1bits.CREN = 1; // Enables receiver circuit
}

void configureInterrupts()
{
    INTCONbits.GIE = 1; // Enable Global Interrupts
    INTCONbits.PEIE = 1; // Enable Peripheral Interrupts
    PIE1bits.RC1IE = 1; // Enable reception interrupts
}

unsigned char receivedData;
unsigned char specialKey = 0b1100; //binary 12 set for keypad entry & 7-segment special "u" case

int OFF = 0xFF;

void __interrupt() ISR(void)
{
        if (PIR1bits.RC1IF && PIE1bits.RC1IE)                             // Check if UART receive interrupt flag is set & interrupt is enabled
            {

                receivedData = RCREG1;                                   // Read received data
                PORTA = OFF;    //clear 7-segment
                
                if (receivedData != 0 && receivedData != specialKey){    //display number given
                    PORTA = receivedData;
                  }   

                if (receivedData == 0){                                  //display 0 if 0
                    PORTA = OFF;
                    }

                if (receivedData == specialKey){                         //display special key if special key
                    PORTA = specialKey;
                    }
    
                PIR1bits.RC1IF = 0; // Clear receive interrupt flag
             }
}

int main(void) {
    
    configurePIC();
    configureReceiveBaud();
    configureReceiveCon();
    configureInterrupts();
    
    while (1)
    {
        PORTCbits.RC2 = 1; // Indicate activity on Receive PIC
    }
    return 0;
}
